float rand(ivec2 v)
{
  int seed = v.x + v.y * 57 + 123 * 241;
  seed= (seed<< 13) ^ seed;
  return (( 1.0 - ( (seed * (seed * seed * 15731 + 789221) + 1376312589) & 2147483647) / 1073741824.0f) + 1.0f) / 2.0f;
}

vec3 randomizeVec(vec3 v, float amount)
{
  return v + vec3(rand(ivec2(gl_GlobalInvocationID.xy))) * amount;
}

// compute plane's normal
    vec3 v0v1 = v2 - v1; 
    vec3 v0v2 = v3 - v1; 
    // no need to normalize
    vec3 n = v0v1.crossProduct(v0v2); // N 
    float area2 = length(n);
 
    // Step 1: finding P
 
    // check if ray and plane are parallel ?
    float nDotRayDirection = dot(n, ray.dir); 
    if (fabs(NdotRayDirection) < FLOAT_PRECISION) // almost 0 
        return false; // they are parallel so they don't intersect ! 
 
    // compute d parameter using equation 2
    float d = dot(n, triangle.v1); 
 
    // compute t (equation 3)
    t = (dot(n, ray.ori) + d) / nDotRayDirection;
    // check if the triangle is in behind the ray
    if (t < 0) return false; // the triangle is behind 
 
    // compute the intersection point using equation 1
    Vec3f o = ray.ori + t * ray.dir; 
 
    // Step 2: inside-outside test
    Vec3f c; // vector perpendicular to triangle's plane 
 
    // edge 0
    vec3 edge0 = t.v2 - t.v1; 
    vec3 vp0 = P - t.v1; 
    c = cross(edge, vp0);
    if (dot(n, c) < 0) return false; // P is on the right side 
 
    // edge 1
    vec3 edge1 = t.v3 - t.v2; 
    vec3 vp1 = P - t.v2; 
    c = cross(edge, vp1);
    if (dot(n, c) < 0 < 0)  return false; // P is on the right side 
 
    // edge 2
    vec3 edge2 = t.v1 - t.v3; 
    vec3 vp2 = p - t.v3; 
    c = cross(edge, vp1);
    if (dot(n, c) < 0 < 0) return false; // P is on the right side; 
 
    return true; // this ray hits the triangle 

    const float EPSILON = 0.0000001;
    vec3 vertex0 = tr.v0;
    vec3 vertex1 = tr.v1;  
    vec3 vertex2 = tr.v2;
    vec3 edge1, edge2, h, s, q;
    float a,f,u,v;
    edge1 = vertex1 - vertex0;
    edge2 = vertex2 - vertex0;
    h = cross(ray.dir, edge2);
    a = dot(edge1, h);
    if (a > -EPSILON && a < EPSILON)
        return false;    // This ray is parallel to this triangle.
    f = 1.0/a;
    s = ray.ori - vertex0;
    u = f * dot(s, h);
    if (u < 0.0 || u > 1.0)
        return false;
    q = cross(s, edge1);
    v = f * dot(ray.dir, q);
    if (v < 0.0 || (u + v) > 1.0)
        return false;
    // At this stage we can compute t to find out where the intersection point is on the line.
    t = f * dot(edge2, q);
    if (t > EPSILON) // ray intersection
    {
        return true;
    }
    else // This means that there is a line intersection but not a ray intersection.
        return false;