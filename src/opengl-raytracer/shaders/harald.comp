vec4 trace(rayObj ray) {
  int depth = 0;
  //hitObj skyHit = hitObj(MAX_SCENE_BOUNDS, 0, 0, material(vec4(0.0, 0.6, 0.8, 1.0), 0, 1));

  vec4 color = vec4(0.0, 0.0, 0.0, 1.0);

  float rprod = 1.0;

  while (depth < MAX_RAY_DEPTH)
  {
    ray.dir = normalize(ray.dir);
    hitObj hit;

    if (rayHit(ray, hit)) //Is an object hit by the ray?
    {
      //Calculate normals
      vec3 pos = getRayPos(ray, hit.t);
      vec3 normal;

      if (hit.objType == 1) //Box
        normal = boxNormal(pos, boxes[hit.objIndex]);
      else if (hit.objType == 2) //Sphere
        normal = sphereNormal(pos, spheres[hit.objIndex]);

      color = color + hit.mat.color * calculateLight(normal, ray.dir, pos) * rprod * (1-hit.mat.reflection);

      //Reflection
      if (hit.mat.reflection == 0) //No reflection, no need to bounce anymore
        break;
      ray.ori = pos + BIAS * normal;
      ray.dir = reflect(ray.dir, normal);
      
      rprod = rprod * hit.mat.reflection;
      depth = depth + 1;
    }
    else
        color = color + texture(skybox,ray.dir) * rprod; //Get skybox color if there's no hit, which means it will hit the sky.
  }

  return color; //Return the color value of this pixel
}