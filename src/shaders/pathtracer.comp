#version 430 core

//Output texture
layout(binding = 0, rgba32f) uniform writeonly image2D framebuffer;

//Object inputs
//layout(std430, binding = 1) buffer ObjectsBuffer { Object objects[]; };

//Skybox
layout(binding = 1) uniform samplerCube skybox;

//Camera uniforms

uniform vec3 eye;
uniform vec3 ray00;
uniform vec3 ray01;
uniform vec3 ray10;
uniform vec3 ray11;

struct material
{
  vec4 color;
  float reflectivity;
  float refractivity;
  float transparency;
};

#define TYPE_MESH 0
#define TYPE_SPHERE 1
#define TYPE_BOX 2

struct object {
    int type;
    vec3 pos;
    material mat;
    //Mesh
    int vStart;
    int vEnd;
    //Spheres
    float scale; //Radius for spheres, scaling factor for everything else
    //Boxes
    vec3 bMax; //Bounding box: width, height, depth
    vec3 bMin;
    //vec3 bBoxNeg; //Needed to determine

};

struct light{
    vec3 pos;
    vec4 color;
};

#define FLOAT_COMPARISON_PRECISION 0.00001

//Raycasting settings
#define MAX_RAY_DEPTH 10
#define DO_REFRACTION 1  // 0 to turn off refraction
#define DO_REFLECTION 0  // 0 to turn off reflectivity
#define DO_FRESNEL    0  // 0 to turn off fresnel. fresnel will only show up if reflectivity is also on.
#define DO_SHADOWS    1
#define DO_LIGHT      1
#define DOUBLE_SIDED  1  // Do rays hit objects entering from the "inside"?
#define GOROUD_SHADING 1 //How should the normals be treated from meshes? Flat vs Goroud


//Object definitions
#define MAX_SCENE_BOUNDS 1000.0
#define NUM_OBJECTS 4
uniform object objects[NUM_OBJECTS];
layout(binding = 2) uniform samplerBuffer objectVertexBuffer;
layout(binding = 3) uniform samplerBuffer objectNormalBuffer;
//Constants
#define AMBIENT_STRENGTH 0.1
#define SPECULAR_STRENGTH 0.7
#define BIAS 0.001

const vec3 sunLightColor = vec3(1.0, 1.0, 1.0); //Direction for the sunlight
const vec3 sunLight = normalize(vec3(1.0, 1.0, 1.0));

//Support structs
struct rayObj
{
  vec3 dir;
  vec3 ori;
};

struct hitRecord
{
  float t; //Distance along ray
  int objType; //Box 1, Sphere 2
  material mat;
  vec3 normal;
};


bool fuzzy_equals(float a, float b)
{
  if (abs(a - b) < FLOAT_COMPARISON_PRECISION) return true;
  return false;
}

bool fuzzy_equals(vec3 a, vec3 b)
{
  if (fuzzy_equals(a.x, b.x) && fuzzy_equals(a.y, b.y) && fuzzy_equals(a.z, b.z)) return true;
  return false;
}

void swap(float a, float b)
{
  float temp = a;
  a = b;
  b = temp;
}

vec3 getRayPos(rayObj ray, float t)
{
  return ray.ori + ray.dir * t;
}

//Intersect functions. Determines if a ray hits a certain object.
//t is the location of the hit. Can get it as a point through the function: ray.ori + ray.dir * t

vec3 sphereNormal(vec3 dir, vec3 point, vec3 spherePos)
{
  #if DOUBLE_SIDED
    vec3 n = normalize(point - spherePos);
    return n * (dot(dir, n) > 0 ? -1 : 1); //Negate normal if backside
  #else
    return normalize(point - spherePos);
  #endif
}

vec3 boxNormal(vec3 dir, vec3 point, vec3 pos, vec3 bMax) //Assuming a box fixed in the XYZ plane
{
  vec3 n;
  if (fuzzy_equals(point.x, pos.x)) n = vec3(-1, 0, 0);
  else if (fuzzy_equals(point.x, pos.x + bMax.x)) n = vec3(1, 0, 0);
  else if (fuzzy_equals(point.y, pos.y)) n = vec3(0, -1, 0);
  else if (fuzzy_equals(point.y, pos.y + bMax.y)) n = vec3(0, 1, 0);
  else if (fuzzy_equals(point.z, pos.z)) n = vec3(0, 0, -1);
  else if (fuzzy_equals(point.z, pos.z + bMax.z)) n = vec3(0, 0, 1);
  #if DOUBLE_SIDED
    return n * (dot(dir, n) <= 0 ? 1 : -1); //Negate normal if backside
  #else
    return n;
  #endif
}

vec3 triangleNormal(vec3 dir, int i, float u, float v) //Barycentric coordinates
{
  vec3 n0 = texelFetch(objectNormalBuffer, i).xyz;
  vec3 n1 = texelFetch(objectNormalBuffer, i+1).xyz;
  vec3 n2 = texelFetch(objectNormalBuffer, i+2).xyz;
  #if GOROUD_SHADING
    int sign = dot(dir, n0+n1+n2) <= 0 ? 1 : -1;
    return normalize(u * n0 + v * n2 + (1 - u - v) * n1) * sign; //Works for precomputed normals
  #else //Flat shading
    float sign = dot(dir, normalize(n0+n1+n2)) < 0 ? 1.0 : -1.0;
    return normalize(n0+n1+n2) * sign; //Works for precomputed normals
  #endif

}

bool intersectBox(rayObj ray, const object b, out hitRecord hit) {
  vec3 tMin = (b.pos + b.bMin * b.scale - ray.ori) / ray.dir;
  vec3 tMax = (b.pos + b.bMax * b.scale - ray.ori) / ray.dir;
  vec3 t1 = min(tMin, tMax);
  vec3 t2 = max(tMin, tMax);
  float tNear = max(max(t1.x, t1.y), t1.z);
  float tFar = min(min(t2.x, t2.y), t2.z);
  if (tNear < tFar) //Ray hit the box
  {
    #if DOUBLE_SIDED
      hit.t = (tNear < 0) ? tFar : tNear;
    #else
      hit.t = tNear;
    #endif
    
    hit.mat = b.mat;
    hit.normal = boxNormal(ray.dir, hit.t*ray.dir + ray.ori, b.pos, b.bMax);
    return true;
  }
  return false;
}

bool intersectSphere(rayObj ray, const object s, out hitRecord hit)
{
    vec3 oc = ray.ori - s.pos;
    float a = dot(ray.dir, ray.dir);
    float b = dot(oc, ray.dir);
    float c = dot(oc, oc) - s.scale * s.scale;
    float discriminant = b * b - a * c;

    if (discriminant > 0.0) //Ray hit the sphere
    {
        float t1 = (-b - sqrt(b * b - a * c)) / a;
        float t2 = (-b + sqrt(b * b - a * c)) / a;

        #if DOUBLE_SIDED
          hit.t = (t2 > 0 && t1 > 0) ? min(t1, t2) : max(t1, t2);
        #else
          hit.t = min(t1, t2);
        #endif
        hit.mat = s.mat;
        hit.objType = TYPE_SPHERE;
        hit.normal = sphereNormal(ray.dir, hit.t * ray.dir + ray.ori, s.pos);
        return true;
    }

    return false;
}

bool intersectTriangle(rayObj ray, vec3 v1, vec3 v0, vec3 v2, out hitRecord hit, out float u, out float v)
{
    const float EPSILON = 0.0000001;
    vec3 edge1, edge2, h, s, q;
    float a,f,t;
    edge1 = v1 - v0;
    edge2 = v2 - v0;
    h = cross(ray.dir, edge2);
    a = dot(edge1, h);
    if (a > -EPSILON && a < EPSILON)
        return false;    // This ray is parallel to this triangle.
    f = 1.0/a;
    s = ray.ori - v0;
    u = f * dot(s, h);
    if (u < 0.0 || u > 1.0)
        return false;
    q = cross(s, edge1);
    v = f * dot(ray.dir, q);
    if (v < 0.0 || (u + v) > 1.0)
        return false;
    // At this stage we can compute t to find out where the intersection point is on the line.
    t = f * dot(edge2, q);
    if (t > EPSILON) // ray intersection
    {
        hit.t = t;
        return true;
    }
    else // This means that there is a line intersection but not a ray intersection.
        return false;
}

bool intersectMesh(rayObj ray, object obj, out hitRecord hit)
{
  //Go through triangles in the vertices and check for intersections
  hit.t = MAX_SCENE_BOUNDS;
  hitRecord tempHit;
  tempHit.t = MAX_SCENE_BOUNDS;
  bool hasHitTemp = false;
  bool hasHit = false;
  vec4 a,b,c;
  float u, v, hu, hv;
  int hiti;
  if (intersectBox(ray, obj, tempHit))
  {
    for (int i = obj.vStart; i < obj.vEnd; i += 3) {
      vec3 v0, v1, v2;
      v0 = texelFetch(objectVertexBuffer, i).xyz * obj.scale + obj.pos;
      v1 = texelFetch(objectVertexBuffer, i + 1).xyz * obj.scale + obj.pos;
      v2 = texelFetch(objectVertexBuffer, i + 2).xyz * obj.scale + obj.pos;
      hasHitTemp = intersectTriangle(ray, v0, v1, v2, tempHit, u, v); //Check if the ray hits the box
      if (hasHitTemp && tempHit.t > 0 && tempHit.t < hit.t) { //Is the hit closer to the camera than the previous hit?
        hit = tempHit;
        hasHit = true;
        hu = u;
        hv = v;
        hiti = i;
      }
    }
  }
  if (hasHit)
  {
    hit.normal = triangleNormal(ray.dir, hiti, hu, hv);
    hit.objType = TYPE_MESH;
    hit.mat = obj.mat;
  }
  return hasHit;
}

bool intersect(rayObj ray, object obj, out hitRecord hit)
{
  switch (obj.type) {
  case TYPE_SPHERE:
      return intersectSphere(ray, obj, hit);
      break;
    case TYPE_BOX:
      return intersectBox(ray, obj, hit);
      break;
  case TYPE_MESH:
      return intersectMesh(ray, obj, hit);
      break;
  }
}

float traceShadow(rayObj ray) //Check whether ray intersects with light source
{
  ray.dir = normalize(ray.dir);
  float t = 0;
  bool hasHit = false;
  hitRecord hit;

  //Check if the ray intersects with box objects
  float tprod = 1.0; //For dealing with transparent objects
    for (int i = 0; i < NUM_OBJECTS; i++) {
      hasHit = intersect(ray, objects[i], hit); //Check if the ray hits the box
      if (hasHit && hit.t > 0 && hit.t < MAX_SCENE_BOUNDS) { //Is the hit closer to the camera than the previous hit?
        if (hit.mat.transparency > 0) //Keep going if you hit a transparent object, but keep track of light loss in tprod
        {
          tprod = tprod * hit.mat.transparency;
        }
        else
          return 0; //Shadow!
      }
    }

  return tprod;
}

float fresnelReflectAmount(vec3 incident, vec3 normal, float n1, float n2, float reflectivity)
{
    // Schlick aproximation
    float r0 = (n1-n2) / (n1+n2);
    r0 *= r0;
    float cosX = -dot(normal, incident);
    if (n1 > n2)
    {
        float n = n1/n2;
        float sinT2 = n*n*(1.0-cosX*cosX);
        // Total internal reflection
        if (sinT2 > 1.0)
            return 1.0;
        cosX = sqrt(1.0-sinT2);
    }
    float x = 1.0-cosX;
    float ret = r0+(1.0-r0)*x*x*x*x*x;

    // adjust reflect multiplier for object reflectivity
    ret = (reflectivity + (1.0-reflectivity) * ret);
    return ret;
}

vec4 calculateLight(vec3 normal, vec3 dir, vec3 pos)
{ //Direction for the sunlight
    // ambient
    vec3 ambient = AMBIENT_STRENGTH * sunLightColor;
  	
    // diffuse 
    float diff = max(dot(normal, sunLight), 0.0);
    vec3 diffuse = diff * sunLightColor;
    
    // specular
    vec3 reflectDir = reflect(sunLight, normal);  
    float spec = pow(max(dot(dir, reflectDir), 0.0), 32);
    vec3 specular = SPECULAR_STRENGTH * spec * sunLightColor;

    //shadow
    #if DO_SHADOWS && DO_LIGHT
      float shadow = traceShadow(rayObj(sunLight, pos + normal * BIAS));
    #else
      float shadow = 1;
    #endif
    
    //return vec4(1.0);
    #if DO_LIGHT
      return vec4(shadow * (diffuse + specular) + ambient, 1.0);
    #else
      return vec4(ambient, 1.0);
    #endif
}

bool rayHit(rayObj ray, out hitRecord hit) {
    hit.t = MAX_SCENE_BOUNDS;
    hitRecord tempHit;
    bool hasHitTemp = false;
    bool hasHit = false;
    //Check if the ray intersects with objects
    for (int i = 0; i < NUM_OBJECTS; i++) {
      hasHitTemp = intersect(ray, objects[i], tempHit); //Check if the ray hits the box
      if (hasHitTemp && tempHit.t > 0 && tempHit.t < hit.t) { //Is the hit closer to the camera than the previous hit?
        hit = tempHit;
        hasHit = true;
      }
    }

    return hasHit;
}

//The poor mans recursion - two almost identical functions to perform 1 level of recursion
vec4 secondaryTrace(rayObj ray) {
  int depth = 0;

  vec4 color = vec4(0.0, 0.0, 0.0, 1.0);

  float rprod = 1.0;
  float tprod = 1.0;

  while (depth < MAX_RAY_DEPTH)
  {
    ray.dir = normalize(ray.dir);
    hitRecord hit;

    if (rayHit(ray, hit)) //Is an object hit by the ray?
    {
      //Calculate normals
      vec3 pos = getRayPos(ray, hit.t);
      vec3 normal = hit.normal;

      float fr = fresnelReflectAmount(ray.dir, normal, 1.0, hit.mat.refractivity, hit.mat.reflectivity);

      if (fr >= 0.5) //Reflection
      {
        color = color + hit.mat.color * calculateLight(normal, ray.dir, pos) * rprod * tprod * (1-hit.mat.reflectivity);
        if (hit.mat.reflectivity == 0) //No reflectivity, no need to bounce anymore
          break;

        ray.ori = pos + BIAS * normal;
        ray.dir = reflect(ray.dir, normal);
        rprod = rprod * hit.mat.reflectivity;
      } 
      else if (fr < 0.5)
      {
        color = color + hit.mat.color * calculateLight(normal, ray.dir, pos) * tprod * rprod * (1-hit.mat.transparency);
        if (hit.mat.transparency == 0) //No reflectivity, no need to bounce anymore
          break;

        ray.ori = pos - BIAS * normal;
        ray.dir = refract(ray.dir, normal, 1.0 / hit.mat.refractivity);
        tprod = tprod * hit.mat.transparency;
      }
   
      depth = depth + 1;
    }
    else
    {
        color = color + texture(skybox,ray.dir) * rprod * tprod; //Get skybox color if there's no hit, which means it will hit the sky
        break;
    }
  }

  return color; //Return the color value of this pixel
}

vec4 trace(rayObj ray) {
  int depth = 0;
  //hitRecord skyHit = hitRecord(MAX_SCENE_BOUNDS, 0, 0, material(vec4(0.0, 0.6, 0.8, 1.0), 0, 1));

  vec4 color = vec4(0.0, 0.0, 0.0, 1.0);

  float rprod = 1.0;
  float tprod = 1.0;

  while (depth < MAX_RAY_DEPTH)
  {
    ray.dir = normalize(ray.dir);
    hitRecord hit;

    if (rayHit(ray, hit)) //Is an object hit by the ray?
    {
      //Calculate normals
      vec3 pos = getRayPos(ray, hit.t);
      vec3 normal = hit.normal;

      #if DO_FRESNEL //Do both reflection and refraction

        if (hit.mat.transparency == 0) //No reflectivity, no need to bounce anymore
        {
          if (hit.mat.reflectivity == 0)
          {
            color = color + hit.mat.color * calculateLight(normal, ray.dir, pos);
            break;
          }
          //Do reflection
          color = color + hit.mat.color * calculateLight(normal, ray.dir, pos) * rprod * (1-hit.mat.reflectivity);

          ray.ori = pos + BIAS * normal;
          ray.dir = reflect(ray.dir, normal);
          rprod = rprod * hit.mat.reflectivity;
          depth = depth + 1;
          continue;
        }

        //Fresnel
        float fr = fresnelReflectAmount(ray.dir, normal, 1.0, hit.mat.refractivity, hit.mat.reflectivity);

        rayObj ray1, ray2;
        ray1.ori = pos + BIAS * normal;
        ray1.dir = reflect(ray.dir, normal);
        vec4 reflectColor = secondaryTrace(ray1);

        ray2.ori = pos - BIAS * normal;
        ray2.dir = refract(ray.dir, normal, 1.0 / hit.mat.refractivity);
        vec4 refractColor = secondaryTrace(ray2);
        color = color + (reflectColor * fr + refractColor * (1 - fr));
        tprod = tprod * hit.mat.transparency;

      #elif DO_REFLECTION //Reflection
        color = color + hit.mat.color * calculateLight(normal, ray.dir, pos) * rprod * (1-hit.mat.reflectivity);
        if (hit.mat.reflectivity == 0) //No reflectivity, no need to bounce anymore
          break;

        ray.ori = pos + BIAS * normal;
        ray.dir = reflect(ray.dir, normal);
        rprod = rprod * hit.mat.reflectivity;
        
      #elif DO_REFRACTION
        color = color + hit.mat.color * calculateLight(normal, ray.dir, pos) * tprod * (1-hit.mat.transparency);
        if (hit.mat.transparency == 0) //No reflectivity, no need to bounce anymore
          break;

        ray.ori = pos - BIAS * normal;
        ray.dir = refract(ray.dir, normal, 1.0 / hit.mat.refractivity);
        tprod = tprod * hit.mat.transparency;
      #else
        color = color + hit.mat.color * calculateLight(normal, ray.dir, pos);
        break; //No reflections, so fine to stop
      #endif

      depth = depth + 1;
    }
    else
    {
        color = color + texture(skybox,ray.dir) * rprod * tprod; //Get skybox color if there's no hit, which means it will hit the sky
        break;
    }
  }

  return color; //Return the color value of this pixel
}

layout (local_size_x = 16, local_size_y = 8) in;
void main(void) {
  ivec2 pix = ivec2(gl_GlobalInvocationID.xy);
  ivec2 size = imageSize(framebuffer);
  if (pix.x >= size.x || pix.y >= size.y) {
    return;
  }
  vec2 pos = vec2(pix) / vec2(size.x - 1, size.y - 1);
  vec3 dir = normalize(mix(mix(ray00, ray01, pos.y), mix(ray10, ray11, pos.y), pos.x));
  rayObj ray = rayObj(dir, eye);
  vec4 color = trace(ray);
  imageStore(framebuffer, pix, color);
}
